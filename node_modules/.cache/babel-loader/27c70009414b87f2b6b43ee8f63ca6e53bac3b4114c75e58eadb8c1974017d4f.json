{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/FetchMyTemplateButton.js\";\nimport React from \"react\";\nimport SideBar from \"../components/SideBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchMyTemplateButton = _ref => {\n  let {\n    setCaption,\n    setAudioSource,\n    setSoundStatus,\n    setStartingTime,\n    makeNewAudio,\n    setTemplateId,\n    userId\n  } = _ref;\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise(resolve => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n  async function startAudio(template) {\n    const audioFilePrefix = \"data:audio/mpeg;base64,\";\n    //setAudioSource(audioFilePrefix + template.audioFile);\n    setTemplateId(template._id);\n    setStartingTime(0);\n    setSoundStatus(true);\n    makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n    const totalCaptionTime = getTotalCaptionTime(template);\n    setTimeout(() => setSoundStatus(false), totalCaptionTime);\n    await iterateCaptions(template, setCaption);\n    setCaption(\"Time to reflect ...\");\n  }\n  function handleClick() {\n    fetch(FETCH_TEMPLATE_PATH + `?userId=${userId}`, {}).then(data => data.json()).then(template => {\n      console.log(template);\n      // update audio and show elements on screen\n      //updateAudio(template.audioFile);\n      //const audioAsBinary = window.atob(template.audioFile);\n      startAudio(template);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      fetchNewTemplate: handleClick,\n      setCaption: true,\n      setAudioSource: true,\n      setSoundStatus: true,\n      setStartingTime: true,\n      makeNewAudio: true,\n      setTemplateId: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Fetch Template\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = FetchMyTemplateButton;\nexport default FetchMyTemplateButton;\nvar _c;\n$RefreshReg$(_c, \"FetchMyTemplateButton\");","map":{"version":3,"names":["React","SideBar","jsxDEV","_jsxDEV","Fragment","_Fragment","PORT","require","FETCH_TEMPLATE_PATH","FetchMyTemplateButton","_ref","setCaption","setAudioSource","setSoundStatus","setStartingTime","makeNewAudio","setTemplateId","userId","iterateCaptions","template","item","lyrics","setCaptionForDuration","lyric","duration","Promise","resolve","setTimeout","getTotalCaptionTime","totalDuration","startAudio","audioFilePrefix","_id","Audio","audioFile","totalCaptionTime","handleClick","fetch","then","data","json","console","log","children","fetchNewTemplate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/FetchMyTemplateButton.js"],"sourcesContent":["import React from \"react\";\nimport SideBar from \"../components/SideBar\";\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchMyTemplateButton = ({\n  setCaption,\n  setAudioSource,\n  setSoundStatus,\n  setStartingTime,\n  makeNewAudio,\n  setTemplateId,\n  userId,\n}) => {\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise((resolve) => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n\n  async function startAudio(template) {\n    const audioFilePrefix = \"data:audio/mpeg;base64,\";\n    //setAudioSource(audioFilePrefix + template.audioFile);\n    setTemplateId(template._id);\n    setStartingTime(0);\n    setSoundStatus(true);\n    makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n    const totalCaptionTime = getTotalCaptionTime(template);\n    setTimeout(() => setSoundStatus(false), totalCaptionTime);\n    await iterateCaptions(template, setCaption);\n    setCaption(\"Time to reflect ...\");\n  }\n\n  function handleClick() {\n    fetch(FETCH_TEMPLATE_PATH + `?userId=${userId}`, {})\n      .then((data) => data.json())\n      .then((template) => {\n        console.log(template);\n        // update audio and show elements on screen\n        //updateAudio(template.audioFile);\n        //const audioAsBinary = window.atob(template.audioFile);\n        startAudio(template);\n      });\n  }\n  return (\n    <>\n      <SideBar\n        fetchNewTemplate={handleClick}\n        setCaption\n        setAudioSource\n        setSoundStatus\n        setStartingTime\n        makeNewAudio\n        setTemplateId\n      />\n      <button onClick={handleClick}>Fetch Template</button>\n    </>\n  );\n};\n\nexport default FetchMyTemplateButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}