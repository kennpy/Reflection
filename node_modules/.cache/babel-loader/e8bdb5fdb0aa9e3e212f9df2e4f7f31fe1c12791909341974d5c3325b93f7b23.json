{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/FetchTemplateButton.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchTemplateButton = _ref => {\n  let {\n    setCaption,\n    setAudioSource,\n    setSoundStatus,\n    setStartingTime\n  } = _ref;\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise(resolve => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n  function handleClick() {\n    const template = fetch(FETCH_TEMPLATE_PATH, {}).then(data => data.json()).then(async template => {\n      console.log(template);\n      // update audio and show elements on screen\n      //updateAudio(template.audioFile);\n      const audioFilePrefix = \"data:audio/mpeg;base64,\";\n      //const audioAsBinary = window.atob(template.audioFile);\n      setAudioSource(template.audioFile);\n      setStartingTime(0);\n      setSoundStatus(true);\n      const totalCaptionTime = getTotalCaptionTime(template);\n      setTimeout(() => setSoundStatus(false), totalCaptionTime);\n      await iterateCaptions(template, setCaption);\n      setCaption(\"Time to reflect ...\");\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: \"Fetch Template\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_c = FetchTemplateButton;\nexport default FetchTemplateButton;\nvar _c;\n$RefreshReg$(_c, \"FetchTemplateButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PORT","require","FETCH_TEMPLATE_PATH","FetchTemplateButton","_ref","setCaption","setAudioSource","setSoundStatus","setStartingTime","iterateCaptions","template","item","lyrics","setCaptionForDuration","lyric","duration","Promise","resolve","setTimeout","getTotalCaptionTime","totalDuration","handleClick","fetch","then","data","json","console","log","audioFilePrefix","audioFile","totalCaptionTime","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/FetchTemplateButton.js"],"sourcesContent":["import React from \"react\";\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchTemplateButton = ({\n  setCaption,\n  setAudioSource,\n  setSoundStatus,\n  setStartingTime,\n}) => {\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise((resolve) => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n\n  function handleClick() {\n    const template = fetch(FETCH_TEMPLATE_PATH, {})\n      .then((data) => data.json())\n      .then(async (template) => {\n        console.log(template);\n        // update audio and show elements on screen\n        //updateAudio(template.audioFile);\n        const audioFilePrefix = \"data:audio/mpeg;base64,\";\n        //const audioAsBinary = window.atob(template.audioFile);\n        setAudioSource(template.audioFile);\n        setStartingTime(0);\n        setSoundStatus(true);\n\n        const totalCaptionTime = getTotalCaptionTime(template);\n        setTimeout(() => setSoundStatus(false), totalCaptionTime);\n        await iterateCaptions(template, setCaption);\n        setCaption(\"Time to reflect ...\");\n      });\n  }\n  return <button onClick={handleClick}>Fetch Template</button>;\n};\n\nexport default FetchTemplateButton;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAM;EAAEC;AAAK,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMC,mBAAmB,GAAI,oBAAmBF,IAAK,YAAW;;AAEhE;AACA,MAAMG,mBAAmB,GAAGC,IAAA,IAKtB;EAAA,IALuB;IAC3BC,UAAU;IACVC,cAAc;IACdC,cAAc;IACdC;EACF,CAAC,GAAAJ,IAAA;EACC,eAAeK,eAAeA,CAACC,QAAQ,EAAEL,UAAU,EAAE;IACnD,KAAK,MAAMM,IAAI,IAAID,QAAQ,CAACE,MAAM,EAAE;MAClC,MAAMC,qBAAqB,CAACF,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,QAAQ,EAAEV,UAAU,CAAC;IACpE;EACF;EAEA,SAASQ,qBAAqBA,CAACC,KAAK,EAAEC,QAAQ,EAAEV,UAAU,EAAE;IAC1D,OAAO,IAAIW,OAAO,CAAEC,OAAO,IAAK;MAC9BZ,UAAU,CAACS,KAAK,CAAC;MACjBI,UAAU,CAAC,MAAMD,OAAO,CAAC,CAAC,EAAEF,QAAQ,CAAC;IACvC,CAAC,CAAC;EACJ;EAEA,SAASI,mBAAmBA,CAACT,QAAQ,EAAE;IACrC,IAAIU,aAAa,GAAG,CAAC;IACrB,KAAK,IAAIT,IAAI,IAAID,QAAQ,CAACE,MAAM,EAAE;MAChCQ,aAAa,IAAIT,IAAI,CAACI,QAAQ;IAChC;IACA,OAAOK,aAAa;EACtB;EAEA,SAASC,WAAWA,CAAA,EAAG;IACrB,MAAMX,QAAQ,GAAGY,KAAK,CAACpB,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAC5CqB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAC,MAAOb,QAAQ,IAAK;MACxBgB,OAAO,CAACC,GAAG,CAACjB,QAAQ,CAAC;MACrB;MACA;MACA,MAAMkB,eAAe,GAAG,yBAAyB;MACjD;MACAtB,cAAc,CAACI,QAAQ,CAACmB,SAAS,CAAC;MAClCrB,eAAe,CAAC,CAAC,CAAC;MAClBD,cAAc,CAAC,IAAI,CAAC;MAEpB,MAAMuB,gBAAgB,GAAGX,mBAAmB,CAACT,QAAQ,CAAC;MACtDQ,UAAU,CAAC,MAAMX,cAAc,CAAC,KAAK,CAAC,EAAEuB,gBAAgB,CAAC;MACzD,MAAMrB,eAAe,CAACC,QAAQ,EAAEL,UAAU,CAAC;MAC3CA,UAAU,CAAC,qBAAqB,CAAC;IACnC,CAAC,CAAC;EACN;EACA,oBAAON,OAAA;IAAQgC,OAAO,EAAEV,WAAY;IAAAW,QAAA,EAAC;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAC9D,CAAC;AAACC,EAAA,GA/CIlC,mBAAmB;AAiDzB,eAAeA,mBAAmB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}