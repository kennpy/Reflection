{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/SideBar.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\nfunction SideBar(_ref) {\n  let {\n    userAnswers,\n    setCaption,\n    setAudioSource,\n    setSoundStatus,\n    setStartingTime,\n    makeNewAudio,\n    setTemplateId\n  } = _ref;\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise(resolve => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n  async function startAudio(template) {\n    const audioFilePrefix = \"data:audio/mpeg;base64,\";\n    //setAudioSource(audioFilePrefix + template.audioFile);\n    console.log(\"starting audio from side bar click\");\n    //setTemplateId(template._id);\n    //setStartingTime(0);\n    setSoundStatus(true);\n    makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n    const totalCaptionTime = getTotalCaptionTime(template);\n    setTimeout(() => setSoundStatus(false), totalCaptionTime);\n    await iterateCaptions(template, setCaption);\n    setCaption(\"Time to reflect ...\");\n  }\n  function handleClick(event) {\n    const list = event.target.parentElement;\n    const requestUrl = FETCH_TEMPLATE_PATH + \"/\" + list.dataset.templateId;\n    console.log(\"url for get request : \", requestUrl);\n    const template = fetch(requestUrl, {}).then(data => data.json()).then(template => {\n      console.log(template);\n      startAudio(template);\n    });\n  }\n  const listItems = userAnswers && userAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"li\", {\n    \"data-template-id\": answer.templateId,\n    \"data-answer-id\": answer._id,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: answer.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, answer._id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    onClick: handleClick,\n    children: listItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n}\n_c = SideBar;\nexport default SideBar;\nvar _c;\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PORT","require","FETCH_TEMPLATE_PATH","SideBar","_ref","userAnswers","setCaption","setAudioSource","setSoundStatus","setStartingTime","makeNewAudio","setTemplateId","iterateCaptions","template","item","lyrics","setCaptionForDuration","lyric","duration","Promise","resolve","setTimeout","getTotalCaptionTime","totalDuration","startAudio","audioFilePrefix","console","log","Audio","audioFile","totalCaptionTime","handleClick","event","list","target","parentElement","requestUrl","dataset","templateId","fetch","then","data","json","listItems","map","answer","_id","children","text","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/SideBar.js"],"sourcesContent":["import React from \"react\";\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\nfunction SideBar({\n  userAnswers,\n  setCaption,\n  setAudioSource,\n  setSoundStatus,\n  setStartingTime,\n  makeNewAudio,\n  setTemplateId,\n}) {\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise((resolve) => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n  async function startAudio(template) {\n    const audioFilePrefix = \"data:audio/mpeg;base64,\";\n    //setAudioSource(audioFilePrefix + template.audioFile);\n    console.log(\"starting audio from side bar click\");\n    //setTemplateId(template._id);\n    //setStartingTime(0);\n    setSoundStatus(true);\n    makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n    const totalCaptionTime = getTotalCaptionTime(template);\n    setTimeout(() => setSoundStatus(false), totalCaptionTime);\n    await iterateCaptions(template, setCaption);\n    setCaption(\"Time to reflect ...\");\n  }\n\n  function handleClick(event) {\n    const list = event.target.parentElement;\n    const requestUrl = FETCH_TEMPLATE_PATH + \"/\" + list.dataset.templateId;\n    console.log(\"url for get request : \", requestUrl);\n    const template = fetch(requestUrl, {})\n      .then((data) => data.json())\n      .then((template) => {\n        console.log(template);\n        startAudio(template);\n      });\n  }\n\n  const listItems =\n    userAnswers &&\n    userAnswers.map((answer) => (\n      <li\n        key={answer._id}\n        data-template-id={answer.templateId}\n        data-answer-id={answer._id}\n      >\n        <p>{answer.text}</p>\n      </li>\n    ));\n  return <ul onClick={handleClick}>{listItems}</ul>;\n}\n\nexport default SideBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}