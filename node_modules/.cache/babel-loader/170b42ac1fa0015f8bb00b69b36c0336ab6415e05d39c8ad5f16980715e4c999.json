{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/FetchTemplateButton.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SideBar = require(\"../components/SideBar\");\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchTemplateButton = _ref => {\n  let {\n    setCaption,\n    setAudioSource,\n    setSoundStatus,\n    setStartingTime,\n    makeNewAudio,\n    setTemplateId\n  } = _ref;\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise(resolve => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n  function handleClick() {\n    let FETCH_TEMPLATE_PATH = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FETCH_TEMPLATE_PATH;\n    const template = fetch(FETCH_TEMPLATE_PATH, {}).then(data => data.json()).then(async template => {\n      console.log(template);\n      // update audio and show elements on screen\n      //updateAudio(template.audioFile);\n      //const audioAsBinary = window.atob(template.audioFile);\n      const audioFilePrefix = \"data:audio/mpeg;base64,\";\n      //setAudioSource(audioFilePrefix + template.audioFile);\n      setTemplateId(template._id);\n      setStartingTime(0);\n      setSoundStatus(true);\n      makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n      const totalCaptionTime = getTotalCaptionTime(template);\n      setTimeout(() => setSoundStatus(false), totalCaptionTime);\n      await iterateCaptions(template, setCaption);\n      setCaption(\"Time to reflect ...\");\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      fetchNewTemplate: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Fetch Template\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = FetchTemplateButton;\nexport default FetchTemplateButton;\nvar _c;\n$RefreshReg$(_c, \"FetchTemplateButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","SideBar","require","PORT","FETCH_TEMPLATE_PATH","FetchTemplateButton","_ref","setCaption","setAudioSource","setSoundStatus","setStartingTime","makeNewAudio","setTemplateId","iterateCaptions","template","item","lyrics","setCaptionForDuration","lyric","duration","Promise","resolve","setTimeout","getTotalCaptionTime","totalDuration","handleClick","arguments","length","undefined","fetch","then","data","json","console","log","audioFilePrefix","_id","Audio","audioFile","totalCaptionTime","children","fetchNewTemplate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/FetchTemplateButton.js"],"sourcesContent":["import React from \"react\";\nconst SideBar = require(\"../components/SideBar\");\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\n//TODO : Add setAudio prop to update audio component\nconst FetchTemplateButton = ({\n  setCaption,\n  setAudioSource,\n  setSoundStatus,\n  setStartingTime,\n  makeNewAudio,\n  setTemplateId,\n}) => {\n  async function iterateCaptions(template, setCaption) {\n    for (const item of template.lyrics) {\n      await setCaptionForDuration(item.lyric, item.duration, setCaption);\n    }\n  }\n\n  function setCaptionForDuration(lyric, duration, setCaption) {\n    return new Promise((resolve) => {\n      setCaption(lyric);\n      setTimeout(() => resolve(), duration);\n    });\n  }\n\n  function getTotalCaptionTime(template) {\n    let totalDuration = 0;\n    for (let item of template.lyrics) {\n      totalDuration += item.duration;\n    }\n    return totalDuration;\n  }\n\n  function handleClick(FETCH_TEMPLATE_PATH = FETCH_TEMPLATE_PATH) {\n    const template = fetch(FETCH_TEMPLATE_PATH, {})\n      .then((data) => data.json())\n      .then(async (template) => {\n        console.log(template);\n        // update audio and show elements on screen\n        //updateAudio(template.audioFile);\n        //const audioAsBinary = window.atob(template.audioFile);\n        const audioFilePrefix = \"data:audio/mpeg;base64,\";\n        //setAudioSource(audioFilePrefix + template.audioFile);\n        setTemplateId(template._id);\n        setStartingTime(0);\n        setSoundStatus(true);\n        makeNewAudio(new Audio(audioFilePrefix + template.audioFile));\n        const totalCaptionTime = getTotalCaptionTime(template);\n        setTimeout(() => setSoundStatus(false), totalCaptionTime);\n        await iterateCaptions(template, setCaption);\n        setCaption(\"Time to reflect ...\");\n      });\n  }\n  return (\n    <>\n      <SideBar fetchNewTemplate={handleClick} />\n      <button onClick={handleClick}>Fetch Template</button>\n    </>\n  );\n};\n\nexport default FetchTemplateButton;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC1B,MAAMC,OAAO,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAChD,MAAM;EAAEC;AAAK,CAAC,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAME,mBAAmB,GAAI,oBAAmBD,IAAK,YAAW;;AAEhE;AACA,MAAME,mBAAmB,GAAGC,IAAA,IAOtB;EAAA,IAPuB;IAC3BC,UAAU;IACVC,cAAc;IACdC,cAAc;IACdC,eAAe;IACfC,YAAY;IACZC;EACF,CAAC,GAAAN,IAAA;EACC,eAAeO,eAAeA,CAACC,QAAQ,EAAEP,UAAU,EAAE;IACnD,KAAK,MAAMQ,IAAI,IAAID,QAAQ,CAACE,MAAM,EAAE;MAClC,MAAMC,qBAAqB,CAACF,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,QAAQ,EAAEZ,UAAU,CAAC;IACpE;EACF;EAEA,SAASU,qBAAqBA,CAACC,KAAK,EAAEC,QAAQ,EAAEZ,UAAU,EAAE;IAC1D,OAAO,IAAIa,OAAO,CAAEC,OAAO,IAAK;MAC9Bd,UAAU,CAACW,KAAK,CAAC;MACjBI,UAAU,CAAC,MAAMD,OAAO,CAAC,CAAC,EAAEF,QAAQ,CAAC;IACvC,CAAC,CAAC;EACJ;EAEA,SAASI,mBAAmBA,CAACT,QAAQ,EAAE;IACrC,IAAIU,aAAa,GAAG,CAAC;IACrB,KAAK,IAAIT,IAAI,IAAID,QAAQ,CAACE,MAAM,EAAE;MAChCQ,aAAa,IAAIT,IAAI,CAACI,QAAQ;IAChC;IACA,OAAOK,aAAa;EACtB;EAEA,SAASC,WAAWA,CAAA,EAA4C;IAAA,IAA3CrB,mBAAmB,GAAAsB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGtB,mBAAmB;IAC5D,MAAMU,QAAQ,GAAGe,KAAK,CAACzB,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAC5C0B,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAC,MAAOhB,QAAQ,IAAK;MACxBmB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;MACrB;MACA;MACA;MACA,MAAMqB,eAAe,GAAG,yBAAyB;MACjD;MACAvB,aAAa,CAACE,QAAQ,CAACsB,GAAG,CAAC;MAC3B1B,eAAe,CAAC,CAAC,CAAC;MAClBD,cAAc,CAAC,IAAI,CAAC;MACpBE,YAAY,CAAC,IAAI0B,KAAK,CAACF,eAAe,GAAGrB,QAAQ,CAACwB,SAAS,CAAC,CAAC;MAC7D,MAAMC,gBAAgB,GAAGhB,mBAAmB,CAACT,QAAQ,CAAC;MACtDQ,UAAU,CAAC,MAAMb,cAAc,CAAC,KAAK,CAAC,EAAE8B,gBAAgB,CAAC;MACzD,MAAM1B,eAAe,CAACC,QAAQ,EAAEP,UAAU,CAAC;MAC3CA,UAAU,CAAC,qBAAqB,CAAC;IACnC,CAAC,CAAC;EACN;EACA,oBACET,OAAA,CAAAE,SAAA;IAAAwC,QAAA,gBACE1C,OAAA,CAACG,OAAO;MAACwC,gBAAgB,EAAEhB;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1C/C,OAAA;MAAQgD,OAAO,EAAErB,WAAY;MAAAe,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACrD,CAAC;AAEP,CAAC;AAACE,EAAA,GAvDI1C,mBAAmB;AAyDzB,eAAeA,mBAAmB;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}