{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/TemplateForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\nfunction TemplateForm() {\n  _s();\n  const [mp3, setMp3] = useState();\n  const [lyrics, setLyrics] = useState([]);\n  const [singleLyric, setSingleLyric] = useState(\"\");\n  const [lyricDuration, setLyricDuration] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  function checkFormIsFilled() {\n    console.log(mp3);\n    return lyricDuration !== \"\" && singleLyric !== \"\" && lyricDuration !== \"\" && fileName !== \"\"\n    //      mp3 !== \"\"\n    ;\n  }\n\n  async function handleSubmission(evt) {\n    evt.preventDefault();\n    const formIsFilled = checkFormIsFilled();\n    console.log(formIsFilled);\n    console.log(mp3);\n    // if (formIsFilled) {\n    //   // validate sign in info on backend and sign them in\n    //   fetch(FETCH_LOGIN_PATH, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify({\n    //       username,\n    //       password,\n    //     }),\n    //   })\n    //     .then((res) => res.json())\n    //     .then((login) => {\n    //       if (login.success) {\n    //         console.log(\"LOGIN SUCCESS\", login);\n    //         setUserId(login.userId);\n    //         setUserName(login.username);\n    //       } else {\n    //         console.log(\"LOGIN FAILURE\");\n    //       }\n    //     });\n    //   // else show invalid credentials\n    // }\n  }\n\n  function addLyric(event) {\n    event.preventDefault();\n    setLyrics(oldLyrics => [...oldLyrics, {\n      lyric: singleLyric,\n      duration: lyricDuration\n    }]);\n  }\n  function handleFileChange(event) {\n    const audioFile = event.target.files[0];\n    if (checkFormIsFilled()) {\n      console.log(audioFile);\n      const formData = new FormData();\n      formData.append(\"files\", audioFile);\n      formData.append(\"lyrics\", lyrics);\n      formData.append(\"files\", audioFile);\n      fetch(FETCH_TEMPLATE_PATH, {\n        method: \"POST\",\n        body: formData\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n      });\n    }\n    //setMp3(event.target.files[0]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MAKE NEW FORM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"filename\",\n          children: \"File Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: fileName,\n          placeholder: \"File Name\",\n          onChange: e => setFileName(e.target.value),\n          id: \"filename\",\n          name: \"filename\",\n          type: \"text\",\n          autoComplete: \"off\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"mp3\",\n          children: \"MP3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: mp3,\n          placeholder: \"MP3\",\n          onChange: handleFileChange,\n          id: \"mp3\",\n          name: \"mp3\",\n          type: \"file\",\n          autoComplete: \"off\",\n          required: true,\n          accept: \"audio/mpeg3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lyric\",\n          children: \"Caption\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: singleLyric,\n          placeholder: \"Caption\",\n          onChange: e => setSingleLyric(e.target.value),\n          id: \"lyric\",\n          name: \"lyric\",\n          type: \"text\",\n          autoComplete: \"off\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: lyricDuration,\n          placeholder: \"Lyric Duration\",\n          onChange: e => setLyricDuration(e.target.value),\n          id: \"lyricDuration\",\n          name: \"lyricDuration\",\n          type: \"text\",\n          autoComplete: \"off\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"add-lyric-btn\",\n          onClick: addLyric,\n          children: \"Add Lyric\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: handleSubmission,\n          children: \"Make Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(TemplateForm, \"cRFhZ7163jI5rF5RVx/5ifOHpp8=\");\n_c = TemplateForm;\nexport default TemplateForm;\nvar _c;\n$RefreshReg$(_c, \"TemplateForm\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PORT","require","FETCH_TEMPLATE_PATH","TemplateForm","_s","mp3","setMp3","lyrics","setLyrics","singleLyric","setSingleLyric","lyricDuration","setLyricDuration","fileName","setFileName","checkFormIsFilled","console","log","handleSubmission","evt","preventDefault","formIsFilled","addLyric","event","oldLyrics","lyric","duration","handleFileChange","audioFile","target","files","formData","FormData","append","fetch","method","body","then","res","json","data","className","children","_jsxFileName","lineNumber","columnNumber","htmlFor","value","placeholder","onChange","e","id","name","type","autoComplete","required","accept","onClick","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/TemplateForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_TEMPLATE_PATH = `http://localhost:${PORT}/templates`;\n\nfunction TemplateForm() {\n  const [mp3, setMp3] = useState();\n  const [lyrics, setLyrics] = useState([]);\n  const [singleLyric, setSingleLyric] = useState(\"\");\n  const [lyricDuration, setLyricDuration] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n\n  function checkFormIsFilled() {\n    console.log(mp3);\n    return (\n      lyricDuration !== \"\" &&\n      singleLyric !== \"\" &&\n      lyricDuration !== \"\" &&\n      fileName !== \"\"\n      //      mp3 !== \"\"\n    );\n  }\n\n  async function handleSubmission(evt) {\n    evt.preventDefault();\n    const formIsFilled = checkFormIsFilled();\n    console.log(formIsFilled);\n    console.log(mp3);\n    // if (formIsFilled) {\n    //   // validate sign in info on backend and sign them in\n    //   fetch(FETCH_LOGIN_PATH, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify({\n    //       username,\n    //       password,\n    //     }),\n    //   })\n    //     .then((res) => res.json())\n    //     .then((login) => {\n    //       if (login.success) {\n    //         console.log(\"LOGIN SUCCESS\", login);\n    //         setUserId(login.userId);\n    //         setUserName(login.username);\n    //       } else {\n    //         console.log(\"LOGIN FAILURE\");\n    //       }\n    //     });\n    //   // else show invalid credentials\n    // }\n  }\n\n  function addLyric(event) {\n    event.preventDefault();\n    setLyrics((oldLyrics) => [\n      ...oldLyrics,\n      { lyric: singleLyric, duration: lyricDuration },\n    ]);\n  }\n\n  function handleFileChange(event) {\n    const audioFile = event.target.files[0];\n    if (checkFormIsFilled()) {\n      console.log(audioFile);\n      const formData = new FormData();\n      formData.append(\"files\", audioFile);\n      formData.append(\"lyrics\", lyrics);\n      formData.append(\"files\", audioFile);\n      fetch(FETCH_TEMPLATE_PATH, {\n        method: \"POST\",\n        body: formData,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data);\n        });\n    }\n    //setMp3(event.target.files[0]);\n  }\n\n  return (\n    <div className=\"login-page\">\n      <h2>MAKE NEW FORM</h2>\n      <form>\n        <div>\n          <label htmlFor=\"filename\">File Name</label>\n          <input\n            value={fileName}\n            placeholder=\"File Name\"\n            onChange={(e) => setFileName(e.target.value)}\n            id=\"filename\"\n            name=\"filename\"\n            type=\"text\"\n            autoComplete=\"off\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"mp3\">MP3</label>\n          <input\n            value={mp3}\n            placeholder=\"MP3\"\n            onChange={handleFileChange}\n            id=\"mp3\"\n            name=\"mp3\"\n            type=\"file\"\n            autoComplete=\"off\"\n            required\n            accept=\"audio/mpeg3\"\n          />\n        </div>\n        <br></br>\n        <div>\n          <label htmlFor=\"lyric\">Caption</label>\n          <input\n            value={singleLyric}\n            placeholder=\"Caption\"\n            onChange={(e) => setSingleLyric(e.target.value)}\n            id=\"lyric\"\n            name=\"lyric\"\n            type=\"text\"\n            autoComplete=\"off\"\n            required\n          />\n          <input\n            value={lyricDuration}\n            placeholder=\"Lyric Duration\"\n            onChange={(e) => setLyricDuration(e.target.value)}\n            id=\"lyricDuration\"\n            name=\"lyricDuration\"\n            type=\"text\"\n            autoComplete=\"off\"\n            required\n          />\n          <br></br>\n\n          <button type=\"add-lyric-btn\" onClick={addLyric}>\n            Add Lyric\n          </button>\n        </div>\n        <div>\n          <br></br>\n\n          <button type=\"submit\" onClick={handleSubmission}>\n            Make Template\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default TemplateForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAM;EAAEC;AAAK,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMC,mBAAmB,GAAI,oBAAmBF,IAAK,YAAW;AAEhE,SAASG,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAChC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAASkB,iBAAiBA,CAAA,EAAG;IAC3BC,OAAO,CAACC,GAAG,CAACZ,GAAG,CAAC;IAChB,OACEM,aAAa,KAAK,EAAE,IACpBF,WAAW,KAAK,EAAE,IAClBE,aAAa,KAAK,EAAE,IACpBE,QAAQ,KAAK;IACb;IAAA;EAEJ;;EAEA,eAAeK,gBAAgBA,CAACC,GAAG,EAAE;IACnCA,GAAG,CAACC,cAAc,CAAC,CAAC;IACpB,MAAMC,YAAY,GAAGN,iBAAiB,CAAC,CAAC;IACxCC,OAAO,CAACC,GAAG,CAACI,YAAY,CAAC;IACzBL,OAAO,CAACC,GAAG,CAACZ,GAAG,CAAC;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEA,SAASiB,QAAQA,CAACC,KAAK,EAAE;IACvBA,KAAK,CAACH,cAAc,CAAC,CAAC;IACtBZ,SAAS,CAAEgB,SAAS,IAAK,CACvB,GAAGA,SAAS,EACZ;MAAEC,KAAK,EAAEhB,WAAW;MAAEiB,QAAQ,EAAEf;IAAc,CAAC,CAChD,CAAC;EACJ;EAEA,SAASgB,gBAAgBA,CAACJ,KAAK,EAAE;IAC/B,MAAMK,SAAS,GAAGL,KAAK,CAACM,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACvC,IAAIf,iBAAiB,CAAC,CAAC,EAAE;MACvBC,OAAO,CAACC,GAAG,CAACW,SAAS,CAAC;MACtB,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,SAAS,CAAC;MACnCG,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE1B,MAAM,CAAC;MACjCwB,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,SAAS,CAAC;MACnCM,KAAK,CAAChC,mBAAmB,EAAE;QACzBiC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEL;MACR,CAAC,CAAC,CACCM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;QACdxB,OAAO,CAACC,GAAG,CAACuB,IAAI,CAAC;MACnB,CAAC,CAAC;IACN;IACA;EACF;;EAEA,oBACEzC,OAAA;IAAK0C,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzB3C,OAAA;MAAA2C,QAAA,EAAI;IAAa;MAAA7B,QAAA,EAAA8B,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB9C,OAAA;MAAA2C,QAAA,gBACE3C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAO+C,OAAO,EAAC,UAAU;UAAAJ,QAAA,EAAC;QAAS;UAAA7B,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3C9C,OAAA;UACEgD,KAAK,EAAElC,QAAS;UAChBmC,WAAW,EAAC,WAAW;UACvBC,QAAQ,EAAGC,CAAC,IAAKpC,WAAW,CAACoC,CAAC,CAACrB,MAAM,CAACkB,KAAK,CAAE;UAC7CI,EAAE,EAAC,UAAU;UACbC,IAAI,EAAC,UAAU;UACfC,IAAI,EAAC,MAAM;UACXC,YAAY,EAAC,KAAK;UAClBC,QAAQ;QAAA;UAAA1C,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAhC,QAAA,EAAA8B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN9C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAO+C,OAAO,EAAC,KAAK;UAAAJ,QAAA,EAAC;QAAG;UAAA7B,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChC9C,OAAA;UACEgD,KAAK,EAAE1C,GAAI;UACX2C,WAAW,EAAC,KAAK;UACjBC,QAAQ,EAAEtB,gBAAiB;UAC3BwB,EAAE,EAAC,KAAK;UACRC,IAAI,EAAC,KAAK;UACVC,IAAI,EAAC,MAAM;UACXC,YAAY,EAAC,KAAK;UAClBC,QAAQ;UACRC,MAAM,EAAC;QAAa;UAAA3C,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC;MAAA;QAAAhC,QAAA,EAAA8B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN9C,OAAA;QAAAc,QAAA,EAAA8B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT9C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAO+C,OAAO,EAAC,OAAO;UAAAJ,QAAA,EAAC;QAAO;UAAA7B,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACtC9C,OAAA;UACEgD,KAAK,EAAEtC,WAAY;UACnBuC,WAAW,EAAC,SAAS;UACrBC,QAAQ,EAAGC,CAAC,IAAKxC,cAAc,CAACwC,CAAC,CAACrB,MAAM,CAACkB,KAAK,CAAE;UAChDI,EAAE,EAAC,OAAO;UACVC,IAAI,EAAC,OAAO;UACZC,IAAI,EAAC,MAAM;UACXC,YAAY,EAAC,KAAK;UAClBC,QAAQ;QAAA;UAAA1C,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACF9C,OAAA;UACEgD,KAAK,EAAEpC,aAAc;UACrBqC,WAAW,EAAC,gBAAgB;UAC5BC,QAAQ,EAAGC,CAAC,IAAKtC,gBAAgB,CAACsC,CAAC,CAACrB,MAAM,CAACkB,KAAK,CAAE;UAClDI,EAAE,EAAC,eAAe;UAClBC,IAAI,EAAC,eAAe;UACpBC,IAAI,EAAC,MAAM;UACXC,YAAY,EAAC,KAAK;UAClBC,QAAQ;QAAA;UAAA1C,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACF9C,OAAA;UAAAc,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAET9C,OAAA;UAAQsD,IAAI,EAAC,eAAe;UAACI,OAAO,EAAEnC,QAAS;UAAAoB,QAAA,EAAC;QAEhD;UAAA7B,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAhC,QAAA,EAAA8B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACN9C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAAc,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAET9C,OAAA;UAAQsD,IAAI,EAAC,QAAQ;UAACI,OAAO,EAAEvC,gBAAiB;UAAAwB,QAAA,EAAC;QAEjD;UAAA7B,QAAA,EAAA8B,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAhC,QAAA,EAAA8B,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAhC,QAAA,EAAA8B,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAhC,QAAA,EAAA8B,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACzC,EAAA,CApJQD,YAAY;AAAAuD,EAAA,GAAZvD,YAAY;AAsJrB,eAAeA,YAAY;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}