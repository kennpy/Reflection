{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  PORT\n} = require(\"../backendConfig\");\nconst FETCH_LOGIN_PATH = `http://localhost:${PORT}/users`;\nfunction Login() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loginErrorExists, setLoginError] = useState(false);\n  const [loginErrorMessage, setLoginErrorMessage] = useState(\"\");\n  function checkFormIsFilled() {\n    let formIsFilled = true;\n    if (username === \"\") {\n      setLoginErrorMessage(\"Username cannot be empty\");\n      formIsFilled = false;\n    } else if (password === \"\") {\n      setLoginErrorMessage(\"Password cannot be empty\");\n      formIsFilled = false;\n    }\n    return formIsFilled;\n  }\n  async function handleLogin() {\n    const formIsFilled = checkFormIsFilled();\n    if (formIsFilled) {\n      // validate sign in info on backend and sign them in\n      const response = await fetch(FETCH_LOGIN_PATH, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      console.log(response.json());\n      //else show invalid credentials\n    }\n\n    console.log(\"Loggin in \", username, password);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), loginErrorExists && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loginErrorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"b6y1khU/cky2Zm0xKO3gvNQ95rE=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PORT","require","FETCH_LOGIN_PATH","Login","_s","username","setUsername","password","setPassword","loginErrorExists","setLoginError","loginErrorMessage","setLoginErrorMessage","checkFormIsFilled","formIsFilled","handleLogin","response","fetch","method","headers","body","JSON","stringify","console","log","json","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/Login.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nconst { PORT } = require(\"../backendConfig\");\nconst FETCH_LOGIN_PATH = `http://localhost:${PORT}/users`;\n\nfunction Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loginErrorExists, setLoginError] = useState(false);\n  const [loginErrorMessage, setLoginErrorMessage] = useState(\"\");\n\n  function checkFormIsFilled() {\n    let formIsFilled = true;\n    if (username === \"\") {\n      setLoginErrorMessage(\"Username cannot be empty\");\n      formIsFilled = false;\n    } else if (password === \"\") {\n      setLoginErrorMessage(\"Password cannot be empty\");\n      formIsFilled = false;\n    }\n    return formIsFilled;\n  }\n\n  async function handleLogin() {\n    const formIsFilled = checkFormIsFilled();\n    if (formIsFilled) {\n      // validate sign in info on backend and sign them in\n      const response = await fetch(FETCH_LOGIN_PATH, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username,\n          password,\n        }),\n      });\n      console.log(response.json());\n      //else show invalid credentials\n    }\n    console.log(\"Loggin in \", username, password);\n  }\n\n  return (\n    <div>\n      <h2>Login Page</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      {loginErrorExists && <p>{loginErrorMessage}</p>}\n\n      <button onClick={handleLogin}>Login</button>\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}