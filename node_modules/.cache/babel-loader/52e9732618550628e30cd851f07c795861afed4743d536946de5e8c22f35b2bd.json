{"ast":null,"code":"var _jsxFileName = \"/Users/kenjismith/programming/personal/reflect/src/components/ReflectionArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Prompt from \"./Prompt\";\nimport AudioElement from \"./Audio\";\nimport FetchTemplateButton from \"./FetchTemplateButton\";\nimport ReflectionTextEntry from \"./ReflectionTextEntry\";\nimport { AudioCaptions } from \"./AudioCaptions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReflectionArea() {\n  _s();\n  // Get reflection info and pass it to components\n  const [caption, setCaption] = useState(\"\");\n  const [soundStatus, setSoundStatus] = useState(false);\n  const [startingTime, setStartingTime] = useState(0);\n  const [audioSource, setAudioSource] = useState(\"/DEFAULT.mp3\");\n  const [audio, makeNewAudio] = useState({});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reflectionArea\",\n    children: [/*#__PURE__*/_jsxDEV(FetchTemplateButton, {\n      setCaption: setCaption,\n      setAudioSource: setAudioSource,\n      setSoundStatus: setSoundStatus,\n      setStartingTime: setStartingTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Prompt, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioElement, {\n      source: audioSource,\n      playSound: soundStatus,\n      startingTime: startingTime,\n      audio: audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioCaptions, {\n      caption: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReflectionTextEntry, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(ReflectionArea, \"E2bZXyOddZ/oNeHtHoTASlubjm0=\");\n_c = ReflectionArea;\nexport default ReflectionArea;\nvar _c;\n$RefreshReg$(_c, \"ReflectionArea\");","map":{"version":3,"names":["React","useState","Prompt","AudioElement","FetchTemplateButton","ReflectionTextEntry","AudioCaptions","jsxDEV","_jsxDEV","ReflectionArea","_s","caption","setCaption","soundStatus","setSoundStatus","startingTime","setStartingTime","audioSource","setAudioSource","audio","makeNewAudio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","source","playSound","_c","$RefreshReg$"],"sources":["/Users/kenjismith/programming/personal/reflect/src/components/ReflectionArea.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Prompt from \"./Prompt\";\nimport AudioElement from \"./Audio\";\nimport FetchTemplateButton from \"./FetchTemplateButton\";\nimport ReflectionTextEntry from \"./ReflectionTextEntry\";\nimport { AudioCaptions } from \"./AudioCaptions\";\n\nfunction ReflectionArea() {\n  // Get reflection info and pass it to components\n  const [caption, setCaption] = useState(\"\");\n  const [soundStatus, setSoundStatus] = useState(false);\n  const [startingTime, setStartingTime] = useState(0);\n  const [audioSource, setAudioSource] = useState(\"/DEFAULT.mp3\");\n  const [audio, makeNewAudio] = useState({});\n\n  return (\n    <div className=\"reflectionArea\">\n      <FetchTemplateButton\n        setCaption={setCaption}\n        setAudioSource={setAudioSource}\n        setSoundStatus={setSoundStatus}\n        setStartingTime={setStartingTime}\n      />\n      <Prompt />\n      <AudioElement\n        source={audioSource}\n        playSound={soundStatus}\n        startingTime={startingTime}\n        audio={audio}\n      />\n      <AudioCaptions caption={caption} />\n      <ReflectionTextEntry />\n    </div>\n  );\n}\n\nexport default ReflectionArea;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,YAAY,MAAM,SAAS;AAClC,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,cAAc,CAAC;EAC9D,MAAM,CAACkB,KAAK,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1C,oBACEO,OAAA;IAAKa,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7Bd,OAAA,CAACJ,mBAAmB;MAClBQ,UAAU,EAAEA,UAAW;MACvBM,cAAc,EAAEA,cAAe;MAC/BJ,cAAc,EAAEA,cAAe;MAC/BE,eAAe,EAAEA;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFlB,OAAA,CAACN,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVlB,OAAA,CAACL,YAAY;MACXwB,MAAM,EAAEV,WAAY;MACpBW,SAAS,EAAEf,WAAY;MACvBE,YAAY,EAAEA,YAAa;MAC3BI,KAAK,EAAEA;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,eACFlB,OAAA,CAACF,aAAa;MAACK,OAAO,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnClB,OAAA,CAACH,mBAAmB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV;AAAChB,EAAA,CA3BQD,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AA6BvB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}